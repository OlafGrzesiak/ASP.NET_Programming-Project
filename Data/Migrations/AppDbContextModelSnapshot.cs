// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Data.Entities.BorrowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("Data.Entities.ContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birth = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5721),
                            Email = "adam@wsei.edu.pl",
                            Name = "Adam",
                            OrganizationId = 1,
                            Phone = "127813268163",
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            Birth = new DateTime(1999, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5726),
                            Email = "ewa@wsei.edu.pl",
                            Name = "Ewa",
                            OrganizationId = 3,
                            Phone = "293443823478",
                            Priority = 2
                        });
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Uczelnia",
                            Name = "WSEI"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Uczelnia",
                            Name = "PJTAK"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Korporacja",
                            Name = "ABB"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Szkoła średnia",
                            Name = "Technikum Informatyczne w Poznaniu"
                        });
                });

            modelBuilder.Entity("Data.Entities.PostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("publication_date");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Jan Kowalski",
                            Comments = "Gratulacje! Bardzo imponujące, szczególnie zarządzanie stanem.",
                            Content = "Właśnie zakończyłem pracę nad moją pierwszą aplikacją w React! Projekt ten nauczył mnie wielu zaawansowanych koncepcji, w tym zarządzania stanem i komunikacji między komponentami.",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5645),
                            GroupId = 2,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5589),
                            Tags = "React, JavaScript, Frontend"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Ewa Nowak",
                            Comments = "Bardzo interesujące! Czy masz jakieś przykłady narzędzi AI, które można by tutaj zastosować?",
                            Content = "Dzielić się chcę przemyśleniami na temat wykorzystania sztucznej inteligencji do automatyzacji testów oprogramowania. AI może znacząco przyspieszyć proces tworzenia testów, oferując jednocześnie wyższą precyzję.",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5659),
                            GroupId = 4,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5656),
                            Tags = "AI, Testing, Automatyzacja"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Michał Anioł",
                            Comments = "Python to naprawdę potężne narzędzie! Używałem Pandas w moim ostatnim projekcie i oszczędziło mi to mnóstwo czasu.",
                            Content = "Odkryłem ostatnio fascynujące zastosowania Pythona w analizie danych. Użycie bibliotek takich jak Pandas i NumPy może znacząco usprawnić przetwarzanie i analizę dużych zbiorów danych.",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5670),
                            GroupId = 4,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5667),
                            Tags = "Python, Data Science, Pandas, NumPy"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Agata Siek",
                            Comments = "Zdecydowanie polecam zapoznać się z Content Security Policy (CSP). Pomogło to mojej aplikacji uniknąć wielu ataków XSS.",
                            Content = "Zastanawiam się nad najlepszymi praktykami w zakresie zabezpieczania aplikacji webowych. Czy ktoś mógłby podzielić się swoimi doświadczeniami w implementacji HTTPS i używaniu nagłówków bezpieczeństwa?",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5680),
                            GroupId = 3,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5678),
                            Tags = "Bezpieczeństwo, HTTPS, WebDev"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Tomasz Beta",
                            Comments = "Pamiętaj o odpowiednim planowaniu i dokumentacji twojej architektury mikroserwisów. Debugowanie może być wyzwaniem bez tego!",
                            Content = "Jakie są wasze doświadczenia z mikroserwisami w .NET Core? Szukam wskazówek dotyczących najlepszych praktyk i potencjalnych pułapek.",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5690),
                            GroupId = 1,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5688),
                            Tags = ".NET Core, Mikroserwisy, Architektura"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Kasia Lato",
                            Comments = "Może zacznij od prostego projektu kalkulatora lub aplikacji do zarządzania zadaniami. To dobre projekty, by poćwiczyć podstawowe konstrukty języka.",
                            Content = "Rozpoczynam naukę programowania w Java i szukam rekomendacji na pierwsze projekty. Co polecacie dla początkującego?",
                            Created = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5707),
                            GroupId = 2,
                            PublicationDate = new DateTime(2024, 2, 24, 16, 23, 7, 349, DateTimeKind.Local).AddTicks(5704),
                            Tags = "Java, Nauka, Projekty dla początkujących"
                        });
                });

            modelBuilder.Entity("GroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Grupa dla programistów specjalizujących się w technologii .NET",
                            Name = "Developers.NET"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Społeczność dla zaawansowanych programistów Java, wymieniających się doświadczeniami i najlepszymi praktykami",
                            Name = "Java Masterclass"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Grupa dla twórców stron internetowych i aplikacji webowych, skupiająca się na HTML, CSS i JavaScript",
                            Name = "Frontend Wizards"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Grupa dla entuzjastów sztucznej inteligencji i uczenia maszynowego, dzielących się wiedzą i projektami",
                            Name = "AI Innovators"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "deed65f5-77e1-497d-9d0d-0ef73d812468",
                            ConcurrencyStamp = "deed65f5-77e1-497d-9d0d-0ef73d812468",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5104e6e9-890d-49cf-9b69-425c60148667",
                            ConcurrencyStamp = "eca45199-36da-41e7-ab3f-424c7eec1d45",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc870b1c-7ffb-408a-bb2a-e4a858614f7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0e80211-8b0e-46a1-ac7e-7d8dbfc1893c",
                            Email = "olaf@test.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OLAF@TEST.PL",
                            NormalizedUserName = "OLAF@TEST.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHLjuGpAsYywPP5OnHztYt29X6Ttr/yrGCAMo23DWLvw7pjw94mrAyGiNgrgfvIm5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38ce420b-ea3b-4731-aaf0-79436bdd3347",
                            TwoFactorEnabled = false,
                            UserName = "olaf@test.pl"
                        },
                        new
                        {
                            Id = "924ee0f6-6e57-484e-9279-0ea5deeb8cf0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19a4f53f-7851-49e4-9a7f-48d7fc95092b",
                            Email = "jan@przyklad.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAN@PRZYKLAD.PL",
                            NormalizedUserName = "JAN@PRZYKLAD.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1xkPwIke7X+XjVzEoBn6RSyKi+HKKS8iP9c10J5Pd116M+IdYzZoFYyA/idY7uCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a8fddf6-64d4-4b4d-ab66-1e010777f7ae",
                            TwoFactorEnabled = false,
                            UserName = "jan@przyklad.pl"
                        },
                        new
                        {
                            Id = "952353cf-dc8c-465f-a1e0-e8d750fe072f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f76b911-a6b6-4142-9cf7-91123ba036e3",
                            Email = "anna@przyklad.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA@PRZYKLAD.PL",
                            NormalizedUserName = "ANNA@PRZYKLAD.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEGLI23VERkTcMtmIopR1rR+Cu8ixgBD8MgLNsMQQNmDauS6TY4FQ2+BaCKPJdeD5wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b1861b5-3715-4c62-a0b2-6ad5e349fb7c",
                            TwoFactorEnabled = false,
                            UserName = "anna@przyklad.pl"
                        },
                        new
                        {
                            Id = "4b18047d-7a6c-4c50-9e02-a48c76d117d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd7e91e-54b6-40a7-a755-31e80a5a04a9",
                            Email = "kasia@przyklad.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KASIA@PRZYKLAD.PL",
                            NormalizedUserName = "KASIA@PRZYKLAD.PL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBHCaAfQeoFERBz+hAU2rMyRq67ihR1BDUkXULdj1y5KYuzh8f5Ch1x+0VNyruJFDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56e6eb5d-8472-42b2-9fd0-01b5adf1beb1",
                            TwoFactorEnabled = false,
                            UserName = "kasia@przyklad.pl"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "924ee0f6-6e57-484e-9279-0ea5deeb8cf0",
                            RoleId = "5104e6e9-890d-49cf-9b69-425c60148667"
                        },
                        new
                        {
                            UserId = "952353cf-dc8c-465f-a1e0-e8d750fe072f",
                            RoleId = "5104e6e9-890d-49cf-9b69-425c60148667"
                        },
                        new
                        {
                            UserId = "4b18047d-7a6c-4c50-9e02-a48c76d117d3",
                            RoleId = "5104e6e9-890d-49cf-9b69-425c60148667"
                        },
                        new
                        {
                            UserId = "fc870b1c-7ffb-408a-bb2a-e4a858614f7e",
                            RoleId = "deed65f5-77e1-497d-9d0d-0ef73d812468"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.BorrowEntity", b =>
                {
                    b.HasOne("Data.Entities.PostEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupEntity", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.ContactEntity", b =>
                {
                    b.HasOne("Data.Entities.OrganizationEntity", "Ogranization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Ogranization");
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.OwnsOne("Data.Models.Address", "Adress", b1 =>
                        {
                            b1.Property<int>("OrganizationEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT");

                            b1.HasKey("OrganizationEntityId");

                            b1.ToTable("organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationEntityId");

                            b1.HasData(
                                new
                                {
                                    OrganizationEntityId = 1,
                                    City = "Kraków",
                                    PostalCode = "31-150",
                                    Street = "Św. Filipa 17"
                                },
                                new
                                {
                                    OrganizationEntityId = 2,
                                    City = "Warszawa",
                                    PostalCode = "00-001",
                                    Street = "Aleje Jerozolimskie 120"
                                },
                                new
                                {
                                    OrganizationEntityId = 3,
                                    City = "Gdańsk",
                                    PostalCode = "80-001",
                                    Street = "ul. Długa 10"
                                },
                                new
                                {
                                    OrganizationEntityId = 4,
                                    City = "Poznań",
                                    PostalCode = "61-001",
                                    Street = "Stary Rynek 1"
                                });
                        });

                    b.Navigation("Adress")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PostEntity", b =>
                {
                    b.HasOne("GroupEntity", "Group")
                        .WithMany("posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("GroupEntity", b =>
                {
                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
